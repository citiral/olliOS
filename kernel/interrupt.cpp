#include "interrupt.h"
#include "types.h"
#include "interruptHandlers.h"
#include "pic.h"

extern "C" void cppInt(u32 interrupt);

#define GENERATE_INTERRUPT(x) \
{ \
	u32 address; \
	__asm__ volatile("jmp 2f\n\
		.align 4\n\
		1: \n\
			pushal \n\
			cld \n\
			push $" #x "\n\
			call cppInt\n\
			add $4, %%esp\n\
			popal\n\
			iret\n\
		2: \n\
			leal 1b, %0" \
			:"=a" (address)); \
	idt.getEntry(x).setOffset(address); \
}

//the IDT that is used by the operating system
static Idt idt;

IdtDescriptor::IdtDescriptor():
	offsetLow(0),
	selector(0),
	zero(0),
	typeAttr(0),
	offsetHi(0) {
}

IdtDescriptor::IdtDescriptor(u32 lower, u32 higher) {
	setValues(lower, higher);
}

void IdtDescriptor::setValues(u32 lower, u32 higher) {
	offsetLow = (u16)lower;
	selector = (u16)(lower >> 16);
	zero = (u8)higher;
	typeAttr = (u8)(higher >> 8);
	offsetHi = (u16)(higher >> 16);
}

void IdtDescriptor::setOffset(u32 offset) {
	offsetHi = (u16)(offset >> 16);
	offsetLow = (u16)offset;
}

u32 Idt::getLength() {
	return _length;
}

void Idt::setLength(u32 length) {
	_length = length;
}

void Idt::setFunction(u32 index, InterruptCallback function) {
	_callbacks[index] = function;
}

void Idt::callFunction(u32 index) {
	_callbacks[index](index);
}

void Idt::setEntry(u32 index, IdtDescriptor entry) {
	_table[index] = entry;
}

void Idt::addEntry(IdtDescriptor entry) {
	_table[_length] = entry;
	_length++;
}

IdtDescriptor& Idt::getEntry(u32 index) {
	return _table[index];
}

void cppInt(u32 interrupt) {
	idt.callFunction(interrupt);
}

void IdtcreateEmpty()
{
	idt = Idt();
	for (int i = 0 ; i < MAX_IDT_ENTRIES ; i++) {
		idt.addEntry(IdtDescriptor(0x00080000, 0x00008E00));
	}
}

void IdtFlush()
{
	DescriptorTablePointer pointer;
	pointer.base = (u32)&idt;
	pointer.limit = (u16)(idt.getLength()*8 - 1);
	reload_idt(pointer.limit, pointer.base);
}

Interrupts interrupts;

void Interrupts::registerIRQ(u32 irq, IRQ handler, void* obj)
{
	_callbacks[irq].push_back(handler);
	_objects[irq].push_back(obj);
}

void Interrupts::unregisterIRQ(u32 irq, IRQ handler, void* obj)
{
	std::vector<IRQ>& callbacks = _callbacks[irq];
	std::vector<void*>& objects = _objects[irq];
	for (size_t i = 0; i < callbacks.size(); i++)
	{
		if (&(callbacks[i]) == &handler && objects[i] == obj)
		{
			callbacks.erase(i);
			objects.erase(i);
			return;
		}
	}
}

void Interrupts::callIRQ(u32 irq, void* stack)
{
	std::vector<IRQ>& callbacks = _callbacks[irq];
	std::vector<void*>& objects = _objects[irq];

	for (size_t i = 0; i < callbacks.size(); i++)
	{
		bool c = callbacks[i](irq, stack, objects[i]);
		if (c)
		{
			break;
		}
	}
	endInterrupt(irq - 20);
}

void interrupts_callRawIRQ(u32 irq)
{
	interrupts.callIRQ(irq, nullptr);
}

extern "C" void __attribute__ ((noinline)) IdtRegisterInterrupts()
{
	GENERATE_INTERRUPT(0);
	GENERATE_INTERRUPT(1);
	GENERATE_INTERRUPT(2);
	GENERATE_INTERRUPT(3);
	GENERATE_INTERRUPT(4);
	GENERATE_INTERRUPT(5);
	GENERATE_INTERRUPT(6);
	GENERATE_INTERRUPT(7);
	GENERATE_INTERRUPT(8);
	GENERATE_INTERRUPT(9);
	GENERATE_INTERRUPT(10);
	GENERATE_INTERRUPT(11);
	GENERATE_INTERRUPT(12);
	GENERATE_INTERRUPT(13);
	GENERATE_INTERRUPT(14);
	GENERATE_INTERRUPT(15);
	GENERATE_INTERRUPT(16);
	GENERATE_INTERRUPT(17);
	GENERATE_INTERRUPT(18);
	GENERATE_INTERRUPT(19);
	GENERATE_INTERRUPT(20);
	GENERATE_INTERRUPT(21);
	GENERATE_INTERRUPT(22);
	GENERATE_INTERRUPT(23);
	GENERATE_INTERRUPT(24);
	GENERATE_INTERRUPT(25);
	GENERATE_INTERRUPT(26);
	GENERATE_INTERRUPT(27);
	GENERATE_INTERRUPT(28);
	GENERATE_INTERRUPT(29);
	GENERATE_INTERRUPT(30);
	GENERATE_INTERRUPT(31);
	GENERATE_INTERRUPT(32);
	GENERATE_INTERRUPT(33);
	GENERATE_INTERRUPT(34);
	GENERATE_INTERRUPT(35);
	GENERATE_INTERRUPT(36);
	GENERATE_INTERRUPT(37);
	GENERATE_INTERRUPT(38);
	GENERATE_INTERRUPT(39);
	GENERATE_INTERRUPT(40);
	GENERATE_INTERRUPT(41);
	GENERATE_INTERRUPT(42);
	GENERATE_INTERRUPT(43);
	GENERATE_INTERRUPT(44);
	GENERATE_INTERRUPT(45);
	GENERATE_INTERRUPT(46);
	GENERATE_INTERRUPT(47);
	GENERATE_INTERRUPT(48);
	GENERATE_INTERRUPT(49);
	GENERATE_INTERRUPT(50);
	GENERATE_INTERRUPT(51);
	GENERATE_INTERRUPT(52);
	GENERATE_INTERRUPT(53);
	GENERATE_INTERRUPT(54);
	GENERATE_INTERRUPT(55);
	GENERATE_INTERRUPT(56);
	GENERATE_INTERRUPT(57);
	GENERATE_INTERRUPT(58);
	GENERATE_INTERRUPT(59);
	GENERATE_INTERRUPT(60);
	GENERATE_INTERRUPT(61);
	GENERATE_INTERRUPT(62);
	GENERATE_INTERRUPT(63);
	GENERATE_INTERRUPT(64);
	GENERATE_INTERRUPT(65);
	GENERATE_INTERRUPT(66);
	GENERATE_INTERRUPT(67);
	GENERATE_INTERRUPT(68);
	GENERATE_INTERRUPT(69);
	GENERATE_INTERRUPT(70);
	GENERATE_INTERRUPT(71);
	GENERATE_INTERRUPT(72);
	GENERATE_INTERRUPT(73);
	GENERATE_INTERRUPT(74);
	GENERATE_INTERRUPT(75);
	GENERATE_INTERRUPT(76);
	GENERATE_INTERRUPT(77);
	GENERATE_INTERRUPT(78);
	GENERATE_INTERRUPT(79);
	GENERATE_INTERRUPT(80);
	GENERATE_INTERRUPT(81);
	GENERATE_INTERRUPT(82);
	GENERATE_INTERRUPT(83);
	GENERATE_INTERRUPT(84);
	GENERATE_INTERRUPT(85);
	GENERATE_INTERRUPT(86);
	GENERATE_INTERRUPT(87);
	GENERATE_INTERRUPT(88);
	GENERATE_INTERRUPT(89);
	GENERATE_INTERRUPT(90);
	GENERATE_INTERRUPT(91);
	GENERATE_INTERRUPT(92);
	GENERATE_INTERRUPT(93);
	GENERATE_INTERRUPT(94);
	GENERATE_INTERRUPT(95);
	GENERATE_INTERRUPT(96);
	GENERATE_INTERRUPT(97);
	GENERATE_INTERRUPT(98);
	GENERATE_INTERRUPT(99);
	GENERATE_INTERRUPT(100);
	GENERATE_INTERRUPT(101);
	GENERATE_INTERRUPT(102);
	GENERATE_INTERRUPT(103);
	GENERATE_INTERRUPT(104);
	GENERATE_INTERRUPT(105);
	GENERATE_INTERRUPT(106);
	GENERATE_INTERRUPT(107);
	GENERATE_INTERRUPT(108);
	GENERATE_INTERRUPT(109);
	GENERATE_INTERRUPT(110);
	GENERATE_INTERRUPT(111);
	GENERATE_INTERRUPT(112);
	GENERATE_INTERRUPT(113);
	GENERATE_INTERRUPT(114);
	GENERATE_INTERRUPT(115);
	GENERATE_INTERRUPT(116);
	GENERATE_INTERRUPT(117);
	GENERATE_INTERRUPT(118);
	GENERATE_INTERRUPT(119);
	GENERATE_INTERRUPT(120);
	GENERATE_INTERRUPT(121);
	GENERATE_INTERRUPT(122);
	GENERATE_INTERRUPT(123);
	GENERATE_INTERRUPT(124);
	GENERATE_INTERRUPT(125);
	GENERATE_INTERRUPT(126);
	GENERATE_INTERRUPT(127);
	GENERATE_INTERRUPT(128);
	GENERATE_INTERRUPT(129);
	GENERATE_INTERRUPT(130);
	GENERATE_INTERRUPT(131);
	GENERATE_INTERRUPT(132);
	GENERATE_INTERRUPT(133);
	GENERATE_INTERRUPT(134);
	GENERATE_INTERRUPT(135);
	GENERATE_INTERRUPT(136);
	GENERATE_INTERRUPT(137);
	GENERATE_INTERRUPT(138);
	GENERATE_INTERRUPT(139);
	GENERATE_INTERRUPT(140);
	GENERATE_INTERRUPT(141);
	GENERATE_INTERRUPT(142);
	GENERATE_INTERRUPT(143);
	GENERATE_INTERRUPT(144);
	GENERATE_INTERRUPT(145);
	GENERATE_INTERRUPT(146);
	GENERATE_INTERRUPT(147);
	GENERATE_INTERRUPT(148);
	GENERATE_INTERRUPT(149);
	GENERATE_INTERRUPT(150);
	GENERATE_INTERRUPT(151);
	GENERATE_INTERRUPT(152);
	GENERATE_INTERRUPT(153);
	GENERATE_INTERRUPT(154);
	GENERATE_INTERRUPT(155);
	GENERATE_INTERRUPT(156);
	GENERATE_INTERRUPT(157);
	GENERATE_INTERRUPT(158);
	GENERATE_INTERRUPT(159);
	GENERATE_INTERRUPT(160);
	GENERATE_INTERRUPT(161);
	GENERATE_INTERRUPT(162);
	GENERATE_INTERRUPT(163);
	GENERATE_INTERRUPT(164);
	GENERATE_INTERRUPT(165);
	GENERATE_INTERRUPT(166);
	GENERATE_INTERRUPT(167);
	GENERATE_INTERRUPT(168);
	GENERATE_INTERRUPT(169);
	GENERATE_INTERRUPT(170);
	GENERATE_INTERRUPT(171);
	GENERATE_INTERRUPT(172);
	GENERATE_INTERRUPT(173);
	GENERATE_INTERRUPT(174);
	GENERATE_INTERRUPT(175);
	GENERATE_INTERRUPT(176);
	GENERATE_INTERRUPT(177);
	GENERATE_INTERRUPT(178);
	GENERATE_INTERRUPT(179);
	GENERATE_INTERRUPT(180);
	GENERATE_INTERRUPT(181);
	GENERATE_INTERRUPT(182);
	GENERATE_INTERRUPT(183);
	GENERATE_INTERRUPT(184);
	GENERATE_INTERRUPT(185);
	GENERATE_INTERRUPT(186);
	GENERATE_INTERRUPT(187);
	GENERATE_INTERRUPT(188);
	GENERATE_INTERRUPT(189);
	GENERATE_INTERRUPT(190);
	GENERATE_INTERRUPT(191);
	GENERATE_INTERRUPT(192);
	GENERATE_INTERRUPT(193);
	GENERATE_INTERRUPT(194);
	GENERATE_INTERRUPT(195);
	GENERATE_INTERRUPT(196);
	GENERATE_INTERRUPT(197);
	GENERATE_INTERRUPT(198);
	GENERATE_INTERRUPT(199);
	GENERATE_INTERRUPT(200);
	GENERATE_INTERRUPT(201);
	GENERATE_INTERRUPT(202);
	GENERATE_INTERRUPT(203);
	GENERATE_INTERRUPT(204);
	GENERATE_INTERRUPT(205);
	GENERATE_INTERRUPT(206);
	GENERATE_INTERRUPT(207);
	GENERATE_INTERRUPT(208);
	GENERATE_INTERRUPT(209);
	GENERATE_INTERRUPT(210);
	GENERATE_INTERRUPT(211);
	GENERATE_INTERRUPT(212);
	GENERATE_INTERRUPT(213);
	GENERATE_INTERRUPT(214);
	GENERATE_INTERRUPT(215);
	GENERATE_INTERRUPT(216);
	GENERATE_INTERRUPT(217);
	GENERATE_INTERRUPT(218);
	GENERATE_INTERRUPT(219);
	GENERATE_INTERRUPT(220);
	GENERATE_INTERRUPT(221);
	GENERATE_INTERRUPT(222);
	GENERATE_INTERRUPT(223);
	GENERATE_INTERRUPT(224);
	GENERATE_INTERRUPT(225);
	GENERATE_INTERRUPT(226);
	GENERATE_INTERRUPT(227);
	GENERATE_INTERRUPT(228);
	GENERATE_INTERRUPT(229);
	GENERATE_INTERRUPT(230);
	GENERATE_INTERRUPT(231);
	GENERATE_INTERRUPT(232);
	GENERATE_INTERRUPT(233);
	GENERATE_INTERRUPT(234);
	GENERATE_INTERRUPT(235);
	GENERATE_INTERRUPT(236);
	GENERATE_INTERRUPT(237);
	GENERATE_INTERRUPT(238);
	GENERATE_INTERRUPT(239);
	GENERATE_INTERRUPT(240);
	GENERATE_INTERRUPT(241);
	GENERATE_INTERRUPT(242);
	GENERATE_INTERRUPT(243);
	GENERATE_INTERRUPT(244);
	GENERATE_INTERRUPT(245);
	GENERATE_INTERRUPT(246);
	GENERATE_INTERRUPT(247);
	GENERATE_INTERRUPT(248);
	GENERATE_INTERRUPT(249);
	GENERATE_INTERRUPT(250);
	GENERATE_INTERRUPT(251);
	GENERATE_INTERRUPT(252);
	GENERATE_INTERRUPT(253);
	GENERATE_INTERRUPT(254);
	GENERATE_INTERRUPT(255);

	/*for (u32 x = 0 ; x < 256 ; x++)
		idt.setFunction(x, &intHandlerUndefined);*/
	
	for (u32 x = 0; x < MAX_IDT_ENTRIES; x++)
		idt.setFunction(x, &interrupts_callRawIRQ);
	
	//idt.setFunction(INT_KEYBOARD, &intHandlerKeyboard);
    idt.setFunction(INT_ATA_BUS1, &intHandlerAta);
	idt.setFunction(INT_ATA_BUS2, &intHandlerAta);
	idt.setFunction(INT_GENERAL_PROTECTION_VIOLATION, &intHandlerGeneralProtectionViolation);
	idt.setFunction(INT_PAGE_FAULT, &intHandlerPageFault);
}
